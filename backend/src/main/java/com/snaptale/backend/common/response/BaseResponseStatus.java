package com.snaptale.backend.common.response;

import lombok.Getter;
import lombok.RequiredArgsConstructor;
import org.springframework.http.HttpStatus;

@Getter
@RequiredArgsConstructor
public enum BaseResponseStatus {
    // 성공 관련 상태
    SUCCESS(HttpStatus.OK, "SUCCESS"),
    CREATED(HttpStatus.CREATED, "CREATED"),

    // 요청 오류 관련 상태
    BAD_REQUEST(HttpStatus.BAD_REQUEST, "BAD_REQUEST"),
    NOT_FOUND(HttpStatus.NOT_FOUND, "NOT_FOUND"),
    USER_NOT_FOUND(HttpStatus.NOT_FOUND, "USER_NOT_FOUND"),
    CARD_NOT_FOUND(HttpStatus.NOT_FOUND, "CARD_NOT_FOUND"),
    DECK_NOT_FOUND(HttpStatus.NOT_FOUND, "DECK_NOT_FOUND"),
    DECK_PRESET_NOT_FOUND(HttpStatus.NOT_FOUND, "DECK_PRESET_NOT_FOUND"),
    LOCATION_NOT_FOUND(HttpStatus.NOT_FOUND, "LOCATION_NOT_FOUND"),
    MATCH_NOT_FOUND(HttpStatus.NOT_FOUND, "MATCH_NOT_FOUND"),
    INVALID_MATCH_STATE(HttpStatus.BAD_REQUEST, "INVALID_MATCH_STATE"),
    DECK_PRESET_CARD_NOT_FOUND(HttpStatus.NOT_FOUND, "DECK_PRESET_CARD_NOT_FOUND"),
    MATCH_LOCATION_NOT_FOUND(HttpStatus.NOT_FOUND, "MATCH_LOCATION_NOT_FOUND"),
    MATCH_PARTICIPANT_NOT_FOUND(HttpStatus.NOT_FOUND, "MATCH_PARTICIPANT_NOT_FOUND"),
    PLAY_NOT_FOUND(HttpStatus.NOT_FOUND, "PLAY_NOT_FOUND"),
    PARTICIPANT_NOT_FOUND(HttpStatus.NOT_FOUND, "PARTICIPANT_NOT_FOUND"),
    // 게임 로직 오류
    INVALID_ACTION_TYPE(HttpStatus.BAD_REQUEST, "INVALID_ACTION_TYPE"),
    INVALID_MATCH_STATUS(HttpStatus.BAD_REQUEST, "INVALID_MATCH_STATUS"),
    INSUFFICIENT_LOCATIONS(HttpStatus.BAD_REQUEST, "INSUFFICIENT_LOCATIONS"),
    ALREADY_PLAYED_THIS_TURN(HttpStatus.BAD_REQUEST, "ALREADY_PLAYED_THIS_TURN"),
    INVALID_SLOT_INDEX(HttpStatus.BAD_REQUEST, "INVALID_SLOT_INDEX"),
    GAME_NOT_STARTED(HttpStatus.BAD_REQUEST, "GAME_NOT_STARTED"),
    GAME_ALREADY_ENDED(HttpStatus.BAD_REQUEST, "GAME_ALREADY_ENDED"),
    WAITING_FOR_OTHER_PLAYER(HttpStatus.BAD_REQUEST, "WAITING_FOR_OTHER_PLAYER"),
    INVALID_DECK_SIZE(HttpStatus.BAD_REQUEST, "덱은 정확히 12장이어야 합니다"),
    DUPLICATE_DECK_USAGE(HttpStatus.BAD_REQUEST, "같은 덱을 두 플레이어가 사용할 수 없습니다"),

    // 서버 오류 관련 상태
    INTERNAL_SERVER_ERROR(HttpStatus.INTERNAL_SERVER_ERROR, "INTERNAL_SERVER_ERROR");

    private final HttpStatus httpStatus;
    private final String message;
}
